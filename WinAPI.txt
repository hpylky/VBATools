' LibWinAPI
'
Option Explicit

'---------+---------+---------+---------+---------+---------+---------+
' Window操作関係
'---------+---------+---------+---------+---------+---------+---------+

' Windows API宣言
Private Declare PtrSafe Function EnumWindows Lib "user32" (ByVal lpEnumFunc As LongPtr, ByVal lParam As LongPtr) As Long
Private Declare PtrSafe Function GetWindowThreadProcessId Lib "user32" (ByVal hWnd As LongPtr, lpdwProcessId As Long) As Long
Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

' グローバル変数（EnumWindowsのコールバック用）
Private hFindWnd As LongPtr
Private targetPID As LongPtr

' アプリ起動時のプロセスID(PID)からウインドウハンドル(hWnd)を取得
' PID    : プロセスID
' 戻り値 : ウインドウハンドル
'          = 0 タイムアウトエラー or 見つからず
'          <> 0 正常終了
' 補足 :
' ・Shell関数でアプリ起動時に戻り値としてPIDが帰ってくるが、
'   それを元にhWndを取得
' ・ウインドウハンドルが見つからない場合は、1秒待って再度検索
' 　を行う。30秒経過しても見つからない場合は0を返して終了。
'
Public Function hWndGetFromPID(PID As Long) As Long
    Dim i As Long
    
    Const TIMEOUT As Long = 30  ' 最大30秒
    
    targetPID = PID
    For i = 1 To TIMEOUT
        hFindWnd = 0
        EnumWindows AddressOf EnumWindowsProc, 0
        If hFindWnd <> 0 Then
            hWndGetFromPID = hFindWnd
            Exit Function
        End If
        Sleep 1000 ' 1秒待つ
        DoEvents
    Next i
End Function

' EnumWindowsのコールバック関数
' hWnd   : ウインドウハンドル
' lParam : 未使用（EnumWindowsから渡される追加引数）
' hFindWnd : 見つかったウインドウハンドル
'           (広域変数, 戻り値)
' 戻り値 : 0 = 見つかった
'          1 = 続行
'
Private Function EnumWindowsProc( _
        ByVal hWnd As LongPtr, _
        ByVal lParam As LongPtr) As Long
    Dim PID As LongPtr
    
    GetWindowThreadProcessId hWnd, PID
    If PID = targetPID Then
        hFindWnd = hWnd
        EnumWindowsProc = 0  ' 見つかった
    Else
        EnumWindowsProc = 1  ' 続行
    End If
End Function

' 区切りコメント作成
'
Public Sub r区切りコメント作成(Optional ByVal control As IRibbonControl)
    Dim DivName As String
    
    ClipBdGetText DivName  ' クリップボードから区切り名を取得
    Do
        DivName = InputBox("コメント名を入力してください。", _
                         "コメント名入力", DivName)
        If StrPtr(DivName) = 0 Then
            Exit Sub    ' キャンセル or Xボタンが押されたとき
        Else
            RegEx DivName, "^\s+|\s+$", ""  ' 両端の空白削除
            GoTo NextProc
        End If
    Loop
NextProc:
    ClipBdPutText 区切りコメント作成(DivName)
    MsgBox "クリップボードに区切りコメントをコピーしました。"
End Sub

' 正規表現による文字列検索・置換
' InpStr  : 検索・置換する文字列 (戻り値)
'           RPatt <> vbNullStringのとき
' SPatt   : 検索パターン
' RPatt   : 置換パターン（既定値 vbNullString）
'           ""で実行すると検索のみ実施
' IgnCase : True = 大文字と小文字を区別しない（既定値)
'           False = 大文字と小文字を区別
' 戻り値 : True  = 一致
'          False = 不一致
'参照設定: Microsoft VBScript Regular Expressions 5.5
'
Public Function RegEx(InpStr As String, _
        SPatt As String, _
        Optional RPatt As String = vbNullString, _
        Optional IgnCase As Boolean = True) As Boolean
    Dim RE As RegExp
    
    Set RE = New RegExp
    With RE
    .Pattern = SPatt            '検索パターンを設定
    .IgnoreCase = IgnCase       '大文字と小文字の区別有無
    .Global = True              '文字列全体を検索
    RegEx = .Test(InpStr)
    If StrPtr(RPatt) <> 0 And RegEx Then
        InpStr = .Replace(InpStr, RPatt)
    End If
    End With
    Set RE = Nothing
End Function

