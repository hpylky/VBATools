' 線形検索で2次元配列を行方向に検索
' SrcTbl : 2次元配列 (基底1)
' FVal   : 検索値
' CPos   : 検索する列位置(横に検索)
' Soff   : 検索開始位置（行位置）
'          -1 = 先頭 or 最後から (既定値)
'          -1 <> 指定の位置から
' Dirc   : 1  = 前方検索 (既定値)
'          -1 = 後方検索
' 戻り値 : -1 <> 見つかった位置（行番号）
'          -1 = 見つからず
' Emptyも""として検索
'
Public Function SrchLinearRow2D(SrcTbl As Variant, _
        FVal As Variant, _
        Optional CPos As Long = 1, _
        Optional Soff As Long = -1, _
        Optional Dirc As Long = 1) As Long
#If DEBUGMode Then
    ' 前処理（引数チェック）
    If ArrayDim(SrcTbl) <> 2 Then
        MsgBox "SrcTblが2次元配列ではありません。"
        Stop: End
    End If
    If ArrayBASE2D(SrcTbl) <> 1 Then
        MsgBox "SrcTblの基底が1ではありません。"
        Stop: End
    End If
    If CPos < LBound(SrcTbl, 2) Or CPos > UBound(SrcTbl, 2) Then
        MsgBox "CPosが不正値です。"
        Stop: End
    End If
    If Soff <> -1 Then
        If Soff < LBound(SrcTbl, 1) Or Soff > UBound(SrcTbl, 1) Then
            MsgBox "Soffが不正値です。"
            Stop: End
        End If
    End If
    If Dirc <> 1 And Dirc <> -1 Then
        MsgBox "Dircが不正値です。"
        Stop: End
    End If
#End If
    ' メイン処理
    Dim SPos As Long, EPos As Long
    Dim i As Long

    ' 検索開始位置の決定
    If Soff = -1 Then
        If Dirc = 1 Then
            SPos = LBound(SrcTbl, 1)
        Else
            SPos = UBound(SrcTbl, 1)
        End If
    Else
        SPos = Soff
    End If

    ' 検索終了位置の決定
    If Dirc = 1 Then
        EPos = UBound(SrcTbl, 1)
    Else
        EPos = LBound(SrcTbl, 1)
    End If

    ' 線形検索の実行
    For i = SPos To EPos Step Dirc
        If SrcTbl(i, CPos) = FVal Then
            SrchLinearRow2D = i ' 見つかった行番号を返す
            Exit Function
        End If
    Next i
    SrchLinearRow2D = -1    ' 見つからず
End Function

' 線形検索で2次元配列を列方向に検索
' SrcTbl : 2次元配列 (基底1)
' FVal   : 検索値
' RPos   : 検索する行位置(縦に検索)
' Soff   : 検索開始位置（列位置）
'          -1 = 先頭 or 最後から (既定値)
'          -1 <> 指定の位置から
' Dirc   : 1  = 前方検索 (既定値)
'          -1 = 後方検索
' 戻り値 : -1 <> 見つかった位置（列番号）
'          -1 = 見つからず
' Emptyも""として検索
'
Public Function SrchLinearCol2D(SrcTbl As Variant, _
        FVal As Variant, _
        Optional RPos As Long = 1, _
        Optional Soff As Long = -1, _
        Optional Dirc As Long = 1) As Long
#If DEBUGMode Then
    ' 前処理（引数チェック）
    If ArrayDim(SrcTbl) <> 2 Then
        MsgBox "SrcTblが2次元配列ではありません。"
        Stop: End
    End If
    If ArrayBASE2D(SrcTbl) <> 1 Then
        MsgBox "SrcTblの基底が1ではありません。"
        Stop: End
    End If
    If RPos < LBound(SrcTbl, 1) Or RPos > UBound(SrcTbl, 1) Then
        MsgBox "RPosが不正値です。"
        Stop: End
    End If
    If Soff <> -1 Then
        If Soff < LBound(SrcTbl, 2) Or Soff > UBound(SrcTbl, 2) Then
            MsgBox "Soffが不正値です。"
            Stop: End
        End If
    End If
    If Dirc <> 1 And Dirc <> -1 Then
        MsgBox "Dircが不正値です。"
        Stop: End
    End If
#End If
    ' メイン処理
    Dim SPos As Long, EPos As Long
    Dim i As Long

    ' 検索開始位置の決定
    If Soff = -1 Then
        If Dirc = 1 Then
            SPos = LBound(SrcTbl, 2)
        Else
            SPos = UBound(SrcTbl, 2)
        End If
    Else
        SPos = Soff
    End If

    ' 検索終了位置の決定
    If Dirc = 1 Then
        EPos = UBound(SrcTbl, 2)
    Else
        EPos = LBound(SrcTbl, 2)
    End If

    ' 線形検索の実行
    For i = SPos To EPos Step Dirc
        If SrcTbl(RPos, i) = FVal Then
            SrchLinearCol2D = i ' 見つかった列番号を返す
            Exit Function
        End If
    Next i
    SrchLinearCol2D = -1    ' 見つからず
End Function

' Err.Numberから対応するErr.Descriptionを求める
' ErrNum : エラー番号(Err.Numberの値)
' 戻り値 : Err.Numberに対応したErr.Descriptionの文字列
'
Public Function ErrDescFmNum(ErrNum As Long) As String
    On Error Resume Next
    Err.Raise ErrNum
    ErrDescFmNum = Err.Description
    Err.Clear
End Function


' 2次元配列を行方向で昇順QuickSort(StrComp版)
' Arr　: ソートする２次元配列（行方向にソート, 基底不問）
' CPos : ソート基準となる列のインデックス（0始まり）
' low  : ソート開始の行インデックス
' high : ソート終了の行インデックス
' 注：配列内の要素はVariant型
'     比較はStrCompを使用（大文字小文字の区別なし）
'     要素にNullがあるとエラーになる可能性あり
'
Public Sub SortSQuickRowAsc2D(ByRef arr As Variant, _
        CPos As Long, ByVal low As Long, ByVal high As Long)

    Dim pivot As Variant
    Dim temp As Variant
    Dim i As Long, j As Long, k As Long

    i = low
    j = high
    pivot = arr((i + j) \ 2, CPos)

    Do While i <= j
        Do While StrComp(arr(i, CPos), pivot, vbBinaryCompare) < 0
            i = i + 1
        Loop
        Do While StrComp(arr(j, CPos), pivot, vbBinaryCompare) > 0
            j = j - 1
        Loop
        If i <= j Then
            For k = LBound(arr, 2) To UBound(arr, 2)
                temp = arr(i, k)
                arr(i, k) = arr(j, k)
                arr(j, k) = temp
            Next k
            i = i + 1
            j = j - 1
        End If
    Loop

    If low < j Then SortSQuickRowAsc2D arr, CPos, low, j
    If i < high Then SortSQuickRowAsc2D arr, CPos, i, high
End Sub

' 2次元配列を行方向で降順QuickSort(StrComp版)
' Arr　: ソートする２次元配列（行方向にソート, 基底不問）
' CPos : ソート基準となる列のインデックス（0始まり）
' low  : ソート開始の行インデックス
' high : ソート終了の行インデックス
' 注：配列内の要素はVariant型
'     比較はStrCompを使用（大文字小文字の区別なし）
'     要素にNullがあるとエラーになる可能性あり
'
Public Sub SortSQuickRowDes2D(ByRef arr As Variant, _
        CPos As Long, ByVal low As Long, ByVal high As Long)

    Dim pivot As Variant
    Dim temp As Variant
    Dim i As Long, j As Long, k As Long

    i = low
    j = high
    pivot = arr((i + j) \ 2, CPos)

    Do While i <= j
        Do While StrComp(arr(i, CPos), pivot, vbBinaryCompare) > 0
            i = i + 1
        Loop
        Do While StrComp(arr(j, CPos), pivot, vbBinaryCompare) < 0
            j = j - 1
        Loop
        If i <= j Then
            For k = LBound(arr, 2) To UBound(arr, 2)
                temp = arr(i, k)
                arr(i, k) = arr(j, k)
                arr(j, k) = temp
            Next k
            i = i + 1
            j = j - 1
        End If
    Loop

    If low < j Then SortSQuickRowDes2D arr, CPos, low, j
    If i < high Then SortSQuickRowDes2D arr, CPos, i, high
End Sub

' 2次元配列を列方向で昇順QuickSort(StrComp版)
' Arr　: ソートする２次元配列（列方向にソート, 基底不問）
' CPos : ソート基準となる行のインデックス（0始まり）
' low  : ソート開始の列インデックス
' high : ソート終了の列インデックス
' 注：配列内の要素はVariant型
'     比較はStrCompを使用（大文字小文字の区別なし）
'     要素にNullがあるとエラーになる可能性あり
'
Public Sub SortSQuickColAsc2D(ByRef arr As Variant, _
        RPos As Long, ByVal low As Long, ByVal high As Long)

    Dim pivot As Variant
    Dim temp As Variant
    Dim i As Long, j As Long, k As Long

    i = low
    j = high
    pivot = arr(RPos, (i + j) \ 2)

    Do While i <= j
        Do While StrComp(arr(RPos, i), pivot, vbBinaryCompare) < 0
            i = i + 1
        Loop
        Do While StrComp(arr(RPos, j), pivot, vbBinaryCompare) > 0
            j = j - 1
        Loop
        If i <= j Then
            For k = LBound(arr, 1) To UBound(arr, 1)
                temp = arr(k, i)
                arr(k, i) = arr(k, j)
                arr(k, j) = temp
            Next k
            i = i + 1
            j = j - 1
        End If
    Loop

    If low < j Then SortSQuickColAsc2D arr, RPos, low, j
    If i < high Then SortSQuickColAsc2D arr, RPos, i, high
End Sub

' 2次元配列を列方向で降順QuickSort(StrComp版)
' Arr　: ソートする２次元配列（列方向にソート, 基底不問）
' CPos : ソート基準となる行のインデックス（0始まり）
' low  : ソート開始の列インデックス
' high : ソート終了の列インデックス
' 注：配列内の要素はVariant型
'     比較はStrCompを使用（大文字小文字の区別なし）
'     要素にNullがあるとエラーになる可能性あり
'
Public Sub SortSQuickColDes2D(ByRef arr As Variant, _
        RPos As Long, ByVal low As Long, ByVal high As Long)

    Dim pivot As Variant
    Dim temp As Variant
    Dim i As Long, j As Long, k As Long

    i = low
    j = high
    pivot = arr(RPos, (i + j) \ 2)

    Do While i <= j
        Do While StrComp(arr(RPos, i), pivot, vbBinaryCompare) > 0
            i = i + 1
        Loop
        Do While StrComp(arr(RPos, j), pivot, vbBinaryCompare) < 0
            j = j - 1
        Loop
        If i <= j Then
            For k = LBound(arr, 1) To UBound(arr, 1)
                temp = arr(k, i)
                arr(k, i) = arr(k, j)
                arr(k, j) = temp
            Next k
            i = i + 1
            j = j - 1
        End If
    Loop

    If low < j Then SortSQuickColDes2D arr, RPos, low, j
    If i < high Then SortSQuickColDes2D arr, RPos, i, high
End Sub
